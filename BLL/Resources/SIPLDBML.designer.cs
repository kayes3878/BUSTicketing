#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DATADBML
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SIPIDB")]
	public partial class SIPLDBMLDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertUSER_GROUP(USER_GROUP instance);
    partial void UpdateUSER_GROUP(USER_GROUP instance);
    partial void DeleteUSER_GROUP(USER_GROUP instance);
    partial void InsertUSER(USER instance);
    partial void UpdateUSER(USER instance);
    partial void DeleteUSER(USER instance);
    partial void InsertROLEWISE_MENU(ROLEWISE_MENU instance);
    partial void UpdateROLEWISE_MENU(ROLEWISE_MENU instance);
    partial void DeleteROLEWISE_MENU(ROLEWISE_MENU instance);
    partial void InsertMODULE_PERMISSION(MODULE_PERMISSION instance);
    partial void UpdateMODULE_PERMISSION(MODULE_PERMISSION instance);
    partial void DeleteMODULE_PERMISSION(MODULE_PERMISSION instance);
    #endregion
		
		public SIPLDBMLDataContext() : 
				base(global::DATADBML.Properties.Settings.Default.SIPIDBConnectionString2, mappingSource)
		{
			OnCreated();
		}
		
		public SIPLDBMLDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SIPLDBMLDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SIPLDBMLDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SIPLDBMLDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<USER_GROUP> USER_GROUPs
		{
			get
			{
				return this.GetTable<USER_GROUP>();
			}
		}
		
		public System.Data.Linq.Table<USER> USERs
		{
			get
			{
				return this.GetTable<USER>();
			}
		}
		
		public System.Data.Linq.Table<ROLEWISE_MENU> ROLEWISE_MENUs
		{
			get
			{
				return this.GetTable<ROLEWISE_MENU>();
			}
		}
		
		public System.Data.Linq.Table<MODULE_PERMISSION> MODULE_PERMISSIONs
		{
			get
			{
				return this.GetTable<MODULE_PERMISSION>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.USER_GROUP")]
	public partial class USER_GROUP : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _GROUP_ID;
		
		private string _GROUP_NAME;
		
		private EntitySet<USER> _USERs;
		
		private EntitySet<ROLEWISE_MENU> _ROLEWISE_MENUs;
		
		private EntitySet<MODULE_PERMISSION> _MODULE_PERMISSIONs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGROUP_IDChanging(long value);
    partial void OnGROUP_IDChanged();
    partial void OnGROUP_NAMEChanging(string value);
    partial void OnGROUP_NAMEChanged();
    #endregion
		
		public USER_GROUP()
		{
			this._USERs = new EntitySet<USER>(new Action<USER>(this.attach_USERs), new Action<USER>(this.detach_USERs));
			this._ROLEWISE_MENUs = new EntitySet<ROLEWISE_MENU>(new Action<ROLEWISE_MENU>(this.attach_ROLEWISE_MENUs), new Action<ROLEWISE_MENU>(this.detach_ROLEWISE_MENUs));
			this._MODULE_PERMISSIONs = new EntitySet<MODULE_PERMISSION>(new Action<MODULE_PERMISSION>(this.attach_MODULE_PERMISSIONs), new Action<MODULE_PERMISSION>(this.detach_MODULE_PERMISSIONs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GROUP_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long GROUP_ID
		{
			get
			{
				return this._GROUP_ID;
			}
			set
			{
				if ((this._GROUP_ID != value))
				{
					this.OnGROUP_IDChanging(value);
					this.SendPropertyChanging();
					this._GROUP_ID = value;
					this.SendPropertyChanged("GROUP_ID");
					this.OnGROUP_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GROUP_NAME", DbType="VarChar(50)")]
		public string GROUP_NAME
		{
			get
			{
				return this._GROUP_NAME;
			}
			set
			{
				if ((this._GROUP_NAME != value))
				{
					this.OnGROUP_NAMEChanging(value);
					this.SendPropertyChanging();
					this._GROUP_NAME = value;
					this.SendPropertyChanged("GROUP_NAME");
					this.OnGROUP_NAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USER_GROUP_USER", Storage="_USERs", ThisKey="GROUP_ID", OtherKey="USER_GROUP_ID")]
		public EntitySet<USER> USERs
		{
			get
			{
				return this._USERs;
			}
			set
			{
				this._USERs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USER_GROUP_ROLEWISE_MENU", Storage="_ROLEWISE_MENUs", ThisKey="GROUP_ID", OtherKey="USER_GROUP_ID")]
		public EntitySet<ROLEWISE_MENU> ROLEWISE_MENUs
		{
			get
			{
				return this._ROLEWISE_MENUs;
			}
			set
			{
				this._ROLEWISE_MENUs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USER_GROUP_MODULE_PERMISSION", Storage="_MODULE_PERMISSIONs", ThisKey="GROUP_ID", OtherKey="USER_GROUP_ID")]
		public EntitySet<MODULE_PERMISSION> MODULE_PERMISSIONs
		{
			get
			{
				return this._MODULE_PERMISSIONs;
			}
			set
			{
				this._MODULE_PERMISSIONs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_USERs(USER entity)
		{
			this.SendPropertyChanging();
			entity.USER_GROUP = this;
		}
		
		private void detach_USERs(USER entity)
		{
			this.SendPropertyChanging();
			entity.USER_GROUP = null;
		}
		
		private void attach_ROLEWISE_MENUs(ROLEWISE_MENU entity)
		{
			this.SendPropertyChanging();
			entity.USER_GROUP = this;
		}
		
		private void detach_ROLEWISE_MENUs(ROLEWISE_MENU entity)
		{
			this.SendPropertyChanging();
			entity.USER_GROUP = null;
		}
		
		private void attach_MODULE_PERMISSIONs(MODULE_PERMISSION entity)
		{
			this.SendPropertyChanging();
			entity.USER_GROUP = this;
		}
		
		private void detach_MODULE_PERMISSIONs(MODULE_PERMISSION entity)
		{
			this.SendPropertyChanging();
			entity.USER_GROUP = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[USER]")]
	public partial class USER : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _USER_ID;
		
		private string _USER_NAME;
		
		private string _USER_PASSWORD;
		
		private long _USER_GROUP_ID;
		
		private EntityRef<USER_GROUP> _USER_GROUP;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUSER_IDChanging(long value);
    partial void OnUSER_IDChanged();
    partial void OnUSER_NAMEChanging(string value);
    partial void OnUSER_NAMEChanged();
    partial void OnUSER_PASSWORDChanging(string value);
    partial void OnUSER_PASSWORDChanged();
    partial void OnUSER_GROUP_IDChanging(long value);
    partial void OnUSER_GROUP_IDChanged();
    #endregion
		
		public USER()
		{
			this._USER_GROUP = default(EntityRef<USER_GROUP>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_USER_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long USER_ID
		{
			get
			{
				return this._USER_ID;
			}
			set
			{
				if ((this._USER_ID != value))
				{
					this.OnUSER_IDChanging(value);
					this.SendPropertyChanging();
					this._USER_ID = value;
					this.SendPropertyChanged("USER_ID");
					this.OnUSER_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_USER_NAME", DbType="VarChar(50)")]
		public string USER_NAME
		{
			get
			{
				return this._USER_NAME;
			}
			set
			{
				if ((this._USER_NAME != value))
				{
					this.OnUSER_NAMEChanging(value);
					this.SendPropertyChanging();
					this._USER_NAME = value;
					this.SendPropertyChanged("USER_NAME");
					this.OnUSER_NAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_USER_PASSWORD", DbType="VarChar(50)")]
		public string USER_PASSWORD
		{
			get
			{
				return this._USER_PASSWORD;
			}
			set
			{
				if ((this._USER_PASSWORD != value))
				{
					this.OnUSER_PASSWORDChanging(value);
					this.SendPropertyChanging();
					this._USER_PASSWORD = value;
					this.SendPropertyChanged("USER_PASSWORD");
					this.OnUSER_PASSWORDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_USER_GROUP_ID", DbType="BigInt NOT NULL")]
		public long USER_GROUP_ID
		{
			get
			{
				return this._USER_GROUP_ID;
			}
			set
			{
				if ((this._USER_GROUP_ID != value))
				{
					if (this._USER_GROUP.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUSER_GROUP_IDChanging(value);
					this.SendPropertyChanging();
					this._USER_GROUP_ID = value;
					this.SendPropertyChanged("USER_GROUP_ID");
					this.OnUSER_GROUP_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USER_GROUP_USER", Storage="_USER_GROUP", ThisKey="USER_GROUP_ID", OtherKey="GROUP_ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public USER_GROUP USER_GROUP
		{
			get
			{
				return this._USER_GROUP.Entity;
			}
			set
			{
				USER_GROUP previousValue = this._USER_GROUP.Entity;
				if (((previousValue != value) 
							|| (this._USER_GROUP.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._USER_GROUP.Entity = null;
						previousValue.USERs.Remove(this);
					}
					this._USER_GROUP.Entity = value;
					if ((value != null))
					{
						value.USERs.Add(this);
						this._USER_GROUP_ID = value.GROUP_ID;
					}
					else
					{
						this._USER_GROUP_ID = default(long);
					}
					this.SendPropertyChanged("USER_GROUP");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ROLEWISE_MENU")]
	public partial class ROLEWISE_MENU : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private System.Nullable<int> _MODULE_ID;
		
		private long _USER_GROUP_ID;
		
		private string _PARENT_MENU_NAME;
		
		private string _PARENT_MENU_CONTENT;
		
		private string _CHILD_MENU_NAME;
		
		private string _CHILD_MENU_CONTENT;
		
		private EntityRef<USER_GROUP> _USER_GROUP;
		
		private EntityRef<MODULE_PERMISSION> _MODULE_PERMISSION;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnMODULE_IDChanging(System.Nullable<int> value);
    partial void OnMODULE_IDChanged();
    partial void OnUSER_GROUP_IDChanging(long value);
    partial void OnUSER_GROUP_IDChanged();
    partial void OnPARENT_MENU_NAMEChanging(string value);
    partial void OnPARENT_MENU_NAMEChanged();
    partial void OnPARENT_MENU_CONTENTChanging(string value);
    partial void OnPARENT_MENU_CONTENTChanged();
    partial void OnCHILD_MENU_NAMEChanging(string value);
    partial void OnCHILD_MENU_NAMEChanged();
    partial void OnCHILD_MENU_CONTENTChanging(string value);
    partial void OnCHILD_MENU_CONTENTChanged();
    #endregion
		
		public ROLEWISE_MENU()
		{
			this._USER_GROUP = default(EntityRef<USER_GROUP>);
			this._MODULE_PERMISSION = default(EntityRef<MODULE_PERMISSION>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MODULE_ID", DbType="Int")]
		public System.Nullable<int> MODULE_ID
		{
			get
			{
				return this._MODULE_ID;
			}
			set
			{
				if ((this._MODULE_ID != value))
				{
					if (this._MODULE_PERMISSION.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMODULE_IDChanging(value);
					this.SendPropertyChanging();
					this._MODULE_ID = value;
					this.SendPropertyChanged("MODULE_ID");
					this.OnMODULE_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_USER_GROUP_ID", DbType="BigInt NOT NULL")]
		public long USER_GROUP_ID
		{
			get
			{
				return this._USER_GROUP_ID;
			}
			set
			{
				if ((this._USER_GROUP_ID != value))
				{
					if (this._USER_GROUP.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUSER_GROUP_IDChanging(value);
					this.SendPropertyChanging();
					this._USER_GROUP_ID = value;
					this.SendPropertyChanged("USER_GROUP_ID");
					this.OnUSER_GROUP_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PARENT_MENU_NAME", DbType="VarChar(50)")]
		public string PARENT_MENU_NAME
		{
			get
			{
				return this._PARENT_MENU_NAME;
			}
			set
			{
				if ((this._PARENT_MENU_NAME != value))
				{
					this.OnPARENT_MENU_NAMEChanging(value);
					this.SendPropertyChanging();
					this._PARENT_MENU_NAME = value;
					this.SendPropertyChanged("PARENT_MENU_NAME");
					this.OnPARENT_MENU_NAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PARENT_MENU_CONTENT", DbType="VarChar(100)")]
		public string PARENT_MENU_CONTENT
		{
			get
			{
				return this._PARENT_MENU_CONTENT;
			}
			set
			{
				if ((this._PARENT_MENU_CONTENT != value))
				{
					this.OnPARENT_MENU_CONTENTChanging(value);
					this.SendPropertyChanging();
					this._PARENT_MENU_CONTENT = value;
					this.SendPropertyChanged("PARENT_MENU_CONTENT");
					this.OnPARENT_MENU_CONTENTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CHILD_MENU_NAME", DbType="VarChar(50)")]
		public string CHILD_MENU_NAME
		{
			get
			{
				return this._CHILD_MENU_NAME;
			}
			set
			{
				if ((this._CHILD_MENU_NAME != value))
				{
					this.OnCHILD_MENU_NAMEChanging(value);
					this.SendPropertyChanging();
					this._CHILD_MENU_NAME = value;
					this.SendPropertyChanged("CHILD_MENU_NAME");
					this.OnCHILD_MENU_NAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CHILD_MENU_CONTENT", DbType="VarChar(100)")]
		public string CHILD_MENU_CONTENT
		{
			get
			{
				return this._CHILD_MENU_CONTENT;
			}
			set
			{
				if ((this._CHILD_MENU_CONTENT != value))
				{
					this.OnCHILD_MENU_CONTENTChanging(value);
					this.SendPropertyChanging();
					this._CHILD_MENU_CONTENT = value;
					this.SendPropertyChanged("CHILD_MENU_CONTENT");
					this.OnCHILD_MENU_CONTENTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USER_GROUP_ROLEWISE_MENU", Storage="_USER_GROUP", ThisKey="USER_GROUP_ID", OtherKey="GROUP_ID", IsForeignKey=true)]
		public USER_GROUP USER_GROUP
		{
			get
			{
				return this._USER_GROUP.Entity;
			}
			set
			{
				USER_GROUP previousValue = this._USER_GROUP.Entity;
				if (((previousValue != value) 
							|| (this._USER_GROUP.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._USER_GROUP.Entity = null;
						previousValue.ROLEWISE_MENUs.Remove(this);
					}
					this._USER_GROUP.Entity = value;
					if ((value != null))
					{
						value.ROLEWISE_MENUs.Add(this);
						this._USER_GROUP_ID = value.GROUP_ID;
					}
					else
					{
						this._USER_GROUP_ID = default(long);
					}
					this.SendPropertyChanged("USER_GROUP");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MODULE_PERMISSION_ROLEWISE_MENU", Storage="_MODULE_PERMISSION", ThisKey="MODULE_ID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public MODULE_PERMISSION MODULE_PERMISSION
		{
			get
			{
				return this._MODULE_PERMISSION.Entity;
			}
			set
			{
				MODULE_PERMISSION previousValue = this._MODULE_PERMISSION.Entity;
				if (((previousValue != value) 
							|| (this._MODULE_PERMISSION.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MODULE_PERMISSION.Entity = null;
						previousValue.ROLEWISE_MENUs.Remove(this);
					}
					this._MODULE_PERMISSION.Entity = value;
					if ((value != null))
					{
						value.ROLEWISE_MENUs.Add(this);
						this._MODULE_ID = value.ID;
					}
					else
					{
						this._MODULE_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("MODULE_PERMISSION");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MODULE_PERMISSION")]
	public partial class MODULE_PERMISSION : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _MODULE_NAME;
		
		private System.Nullable<long> _USER_GROUP_ID;
		
		private EntitySet<ROLEWISE_MENU> _ROLEWISE_MENUs;
		
		private EntityRef<USER_GROUP> _USER_GROUP;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnMODULE_NAMEChanging(string value);
    partial void OnMODULE_NAMEChanged();
    partial void OnUSER_GROUP_IDChanging(System.Nullable<long> value);
    partial void OnUSER_GROUP_IDChanged();
    #endregion
		
		public MODULE_PERMISSION()
		{
			this._ROLEWISE_MENUs = new EntitySet<ROLEWISE_MENU>(new Action<ROLEWISE_MENU>(this.attach_ROLEWISE_MENUs), new Action<ROLEWISE_MENU>(this.detach_ROLEWISE_MENUs));
			this._USER_GROUP = default(EntityRef<USER_GROUP>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MODULE_NAME", DbType="VarChar(50)")]
		public string MODULE_NAME
		{
			get
			{
				return this._MODULE_NAME;
			}
			set
			{
				if ((this._MODULE_NAME != value))
				{
					this.OnMODULE_NAMEChanging(value);
					this.SendPropertyChanging();
					this._MODULE_NAME = value;
					this.SendPropertyChanged("MODULE_NAME");
					this.OnMODULE_NAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_USER_GROUP_ID", DbType="BigInt")]
		public System.Nullable<long> USER_GROUP_ID
		{
			get
			{
				return this._USER_GROUP_ID;
			}
			set
			{
				if ((this._USER_GROUP_ID != value))
				{
					if (this._USER_GROUP.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUSER_GROUP_IDChanging(value);
					this.SendPropertyChanging();
					this._USER_GROUP_ID = value;
					this.SendPropertyChanged("USER_GROUP_ID");
					this.OnUSER_GROUP_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MODULE_PERMISSION_ROLEWISE_MENU", Storage="_ROLEWISE_MENUs", ThisKey="ID", OtherKey="MODULE_ID")]
		public EntitySet<ROLEWISE_MENU> ROLEWISE_MENUs
		{
			get
			{
				return this._ROLEWISE_MENUs;
			}
			set
			{
				this._ROLEWISE_MENUs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USER_GROUP_MODULE_PERMISSION", Storage="_USER_GROUP", ThisKey="USER_GROUP_ID", OtherKey="GROUP_ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public USER_GROUP USER_GROUP
		{
			get
			{
				return this._USER_GROUP.Entity;
			}
			set
			{
				USER_GROUP previousValue = this._USER_GROUP.Entity;
				if (((previousValue != value) 
							|| (this._USER_GROUP.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._USER_GROUP.Entity = null;
						previousValue.MODULE_PERMISSIONs.Remove(this);
					}
					this._USER_GROUP.Entity = value;
					if ((value != null))
					{
						value.MODULE_PERMISSIONs.Add(this);
						this._USER_GROUP_ID = value.GROUP_ID;
					}
					else
					{
						this._USER_GROUP_ID = default(Nullable<long>);
					}
					this.SendPropertyChanged("USER_GROUP");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ROLEWISE_MENUs(ROLEWISE_MENU entity)
		{
			this.SendPropertyChanging();
			entity.MODULE_PERMISSION = this;
		}
		
		private void detach_ROLEWISE_MENUs(ROLEWISE_MENU entity)
		{
			this.SendPropertyChanging();
			entity.MODULE_PERMISSION = null;
		}
	}
}
#pragma warning restore 1591
